; data2.asm - Data Section 2 for 3c5x9pd.asm
;
; This file contains strings, box-drawing characters, jump tables, and dynamic code/data
; for the 3Com 3C509 packet driver. Addresses are rebased to CS:0x100 + 0x28C (0x2613
; start) to match runtime offsets in code.asm references (e.g., 0x238b → 0x2613).

; --- Code-to-Data Transition Padding ---
; Originally at 0x2383, rebased to 0x2613
; No references in code.asm; likely padding or linker artifact between sub_2371 and data
padding_code_to_data:
    db 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x1c, 0x00, 0x1c  ; 8 bytes: Alignment padding
    db 0x31, 0xff                                      ; 2 bytes: Possible stray data
    db 0x0f                                            ; 1 byte: POP ES (unused opcode)
    db 0xcf                                            ; 1 byte: IRET (unused opcode)

; --- Error and Prompt Strings ---
; 0x238b → 0x261b: Referenced in sub_18d4 error paths via sub_1bb3 (print string)
msg_param_error:
    db 0x20, "error in parameter specification.$"     ; DOS string, $ terminated

; 0x23b4 → 0x2644: Used in sub_2287 (mov dx, 0x2d61 adjusted) for user pause
msg_press_any_key:
    db 0x0a, 0x0d, "Press any key to continue. . .$"  ; CRLF prefixed, $ terminated

; 0x23d7 → 0x2667: Config feedback, likely in sub_1d0c or sub_1690
msg_using_sync_cycles:
    db 0x0a, 0x0d, "Using synchronous cycles.$"       ; CRLF prefixed, $ terminated

; --- Box-Drawing Characters for Usage Screen ---
; 0x23f0 → 0x2680: Top border of usage box
box_top_border:
    db 0xda, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xbf  ; Corner: ┌────┐ style

; 0x243f → 0x26cf: Left vertical bar with spaces (first empty line)
box_line_1:
    db 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3  ; │          │

; 0x248e → 0x271e: Usage line
box_usage_line:
    db 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db "usage: 3C5X9PD [switches] <pkt_int_num> [parameter=X]"
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0xb3                          ; │ usage: ... │

; 0x24e9 → 0x2779: Empty line
box_line_2:
    db 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3  ; │          │

; 0x2538 → 0x27c8: Switches header
box_switches_header:
    db 0xb3, 0x20, "Switches:"
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3, 0x24  ; │ Switches: ... │$

; 0x2586 → 0x2816: Empty line
box_line_3:
    db 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3  ; │          │

; 0x25ca → 0x285a: Repeated usage line
msg_usage_boxed:
    db 0xb3, "  Usage: 3C5X9PD [switches] <pkt_int_num> [parameter=X]         ", 0xb3

; 0x2612 → 0x28a2: Empty line
box_line_4:
    db 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3  ; │          │

; 0x2660 → 0x28f0: Switches line
msg_switches_boxed:
    db 0xb3, "  Switches:                             ", 0xb3, '$'

; 0x269a → 0x292a: Empty line
box_line_5:
    db 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3  ; │          │

; 0x26e9 → 0x2979: Optional parameters line
msg_optional_params_boxed:
    db 0xb3, "  Optional parameters:                  ", 0xb3, '$'

; 0x2727 → 0x29b7: Empty line
box_line_6:
    db 0xb3, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
    db 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xb3  ; │          │

; 0x2762 → 0x29f2: Bottom border
box_bottom_border:
    db 0xc0, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4
    db 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xc4, 0xd9  ; └────┘ style

; --- Configuration Display Strings ---
; 0x27b1 → 0x2a41: Packet driver interrupt display
msg_packet_driver_int:
    db '$', "Packet Driver Interrupt: ", '$'           ; Double $ for formatting?

; 0x27cc → 0x2a5c: Slot number display
msg_slot:
    db "Slot:                   ", '$'               ; sub_1d0c fills slot value

; 0x27e5 → 0x2a75: I/O base display (sub_1d0c, mov dx, 0x3087)
msg_io_base:
    db "I/O base:               ", '$'              ; Filled with [0x264]

; 0x2800 → 0x2a90: Interrupt number display
msg_interrupt:
    db "Interrupt:              ", '$'              ; Filled with [0x269]

; 0x281b → 0x2aab: Transceiver type display
msg_transceiver:
    db "Transceiver:            ", '$'              ; Filled via sub_1d0c logic

; 0x2836 → 0x2ac6: Ethernet address display
msg_eth_addr:
    db "Ethernet Address:        ", '$'             ; sub_1d0c (0x1d5f, mov dx, 0x30ef)

; --- Transceiver Type Strings ---
; 0x2851 → 0x2ae1: BNC transceiver
msg_transceiver_bnc:
    db "BNC (10Base2)", '$'                         ; Selected via config bits

; 0x285f → 0x2aef: Twisted Pair transceiver
msg_transceiver_twisted_pair:
    db "Twisted Pair (10BaseT)", '$'                ; Selected via config bits

; 0x2876 → 0x2b06: External (AUI) transceiver
msg_transceiver_external:
    db "External (AUI)", '$'                        ; Selected via config bits

; --- Dynamic Code/Data for FIFO Operations ---
; 0x2894 → 0x2b24: Optimized FIFO read/write routines, possibly copied to RAM
fifo_transfer_routines:
    ; Block 1: Full INSD sequence (RX FIFO read)
    db 0x50, 0x8a, 0xc1, 0xc1, 0xe9, 0x02           ; push ax; mov al, cl; shr cx, 2
    db 0x66, 0xf3, 0x6d                              ; rep insd (32-bit FIFO read)
    db 0x24, 0x03, 0x8a, 0xc8                        ; and al, 3; mov cl, al
    db 0xf3, 0x6c                                     ; rep insb (byte cleanup)
    db 0xd1, 0xe9                                     ; shr cx, 1
    db 0xf3, 0x6d                                     ; rep insd
    db 0x13, 0xc9                                     ; adc cx, cx
    db 0xf3, 0x6c                                     ; rep insb
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb, 0x8b, 0xdb ; ds: mov bx, bx (NOPs)

    ; Block 2: INSD variant
    db 0x8a, 0xc1, 0xc1, 0xe9, 0x02                 ; mov al, cl; shr cx, 2
    db 0x66, 0xf3, 0x6d                              ; rep insd
    db 0x24, 0x03, 0x8a, 0xc8                        ; and al, 3; mov cl, al
    db 0xf3, 0x6c                                     ; rep insb
    db 0xd1, 0xe9, 0xf3, 0x6d                        ; shr cx, 1; rep insd
    db 0x13, 0xc9, 0xf3, 0x6c                        ; adc cx, cx; rep insb
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb           ; ds: mov bx, bx (NOPs)

    ; Block 3: INSD shorter
    db 0xc1, 0xe9, 0x02, 0x66, 0xf3, 0x6d           ; shr cx, 2; rep insd
    db 0x13, 0xc9, 0xf3, 0x6d                        ; adc cx, cx; rep insd
    db 0xd1, 0xe9, 0xf3, 0x6d                        ; shr cx, 1; rep insd
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb           ; ds: mov bx, bx (NOPs)

    ; Block 4: INSD minimal
    db 0xc1, 0xe9, 0x02, 0x66, 0xf3, 0x6d           ; shr cx, 2; rep insd
    db 0xd1, 0xe9, 0xf3, 0x6d                        ; shr cx, 1; rep insd
    db 0x8b, 0xdb                                     ; mov bx, bx (NOP)

    ; Block 5: INSD with alignment
    db 0xc1, 0xe9, 0x02, 0x66, 0xf3, 0x6d           ; shr cx, 2; rep insd
    db 0xfc, 0x80, 0xe1, 0xfc                        ; cld; and cl, 0xfc
    db 0xd1, 0xe9, 0xf3, 0x6d                        ; shr cx, 1; rep insd

    ; Block 6: Full OUTSD sequence (TX FIFO write)
    db 0x50, 0x8a, 0xc1, 0xc1, 0xe9, 0x02           ; push ax; mov al, cl; shr cx, 2
    db 0x66, 0xf3, 0x6f                              ; rep outsd (32-bit FIFO write)
    db 0x24, 0x03, 0x8a, 0xc8                        ; and al, 3; mov cl, al
    db 0xf3, 0x6e, 0x58                              ; rep outsb; pop ax

    ; Block 7: OUTSD shorter
    db 0xd1, 0xe9, 0xf3, 0x6f                        ; shr cx, 1; rep outsd
    db 0x13, 0xc9, 0xf3, 0x6e                        ; adc cx, cx; rep outsb
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb, 0x8b, 0xdb ; ds: mov bx, bx (NOPs)

    ; Block 8: OUTSD variant
    db 0x8a, 0xc1, 0xc1, 0xe9, 0x02                 ; mov al, cl; shr cx, 2
    db 0x66, 0xf3, 0x6f                              ; rep outsd
    db 0x24, 0x03, 0x8a, 0xc8                        ; and al, 3; mov cl, al
    db 0xf3, 0x6e                                     ; rep outsb
    db 0xd1, 0xe9, 0xf3, 0x6f                        ; shr cx, 1; rep outsd
    db 0x13, 0xc9, 0xf3, 0x6e                        ; adc cx, cx; rep outsb
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb           ; ds: mov bx, bx (NOPs)

    ; Block 9: OUTSD shorter
    db 0xc1, 0xe9, 0x02, 0x66, 0xf3, 0x6f           ; shr cx, 2; rep outsd
    db 0x13, 0xc9, 0xf3, 0x6f                        ; adc cx, cx; rep outsd
    db 0xd1, 0xe9, 0xf3, 0x6f                        ; shr cx, 1; rep outsd
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb           ; ds: mov bx, bx (NOPs)

    ; Block 10: OUTSD minimal
    db 0xc1, 0xe9, 0x02, 0x66, 0xf3, 0x6f           ; shr cx, 2; rep outsd
    db 0xd1, 0xe9, 0xf3, 0x6f                        ; shr cx, 1; rep outsd
    db 0x8b, 0xdb                                     ; mov bx, bx (NOP)

    ; Block 11: Padding/Transition (not functional)
    db 0x66, 0x6f                                     ; outsd (stray prefix)
    db 0x6f, 0x6f, 0x6f, 0x6f, 0x6f                 ; Repeated 0x6f (padding)

    ; Block 12: Full MOVSD sequence (memory copy)
    db 0x50, 0x8a, 0xc1, 0xc1, 0xe9, 0x02           ; push ax; mov al, cl; shr cx, 2
    db 0x66, 0xf3, 0xa5                              ; rep movsd (32-bit memory copy)
    db 0x24, 0x03, 0x8a, 0xc8                        ; and al, 3; mov cl, al
    db 0xf3, 0xa4, 0x58                              ; rep movsb; pop ax

    ; Block 13: MOVSD shorter
    db 0xd1, 0xe9, 0xf3, 0xa5                        ; shr cx, 1; rep movsd
    db 0x13, 0xc9, 0xf3, 0xa4                        ; adc cx, cx; rep movsb
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb, 0x8b, 0xdb ; ds: mov bx, bx (NOPs)

    ; Block 14: MOVSD variant
    db 0x8a, 0xc1, 0xc1, 0xe9, 0x02                 ; mov al, cl; shr cx, 2
    db 0x66, 0xf3, 0xa5                              ; rep movsd
    db 0x24, 0x03, 0x8a, 0xc8                        ; and al, 3; mov cl, al
    db 0xf3, 0xa4                                     ; rep movsb
    db 0xd1, 0xe9, 0xf3, 0xa5                        ; shr cx, 1; rep movsd
    db 0x13, 0xc9, 0xf3, 0xa4                        ; adc cx, cx; rep movsb
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb           ; ds: mov bx, bx (NOPs)

    ; Block 15: MOVSD shorter
    db 0xc1, 0xe9, 0x02, 0x66, 0xf3, 0xa5           ; shr cx, 2; rep movsd
    db 0x13, 0xc9, 0xf3, 0xa5                        ; adc cx, cx; rep movsd
    db 0xd1, 0xe9, 0xf3, 0xa5                        ; shr cx, 1; rep movsd
    db 0x3e, 0x8b, 0xdb, 0x3e, 0x8b, 0xdb           ; ds: mov bx, bx (NOPs)

    ; Block 16: MOVSD minimal
    db 0xc1, 0xe9, 0x02, 0x66, 0xf3, 0xa5           ; shr cx, 2; rep movsd
    db 0xd1, 0xe9, 0xf3, 0xa5                        ; shr cx, 1; rep movsd
    db 0x8b, 0xdb                                     ; mov bx, bx (NOP)

; --- IRQ Vector Jump Table ---
; 0x31d5 → 0x3465: Referenced via [bx+0x24f] in sub_813 (IRQ initialization)
irq_vector_table:
    db 0x4d, 0x31, 0x3d, 0x31, 0x10, 0x00           ; IRQ 0: 0x313d, 0x0010
    db 0x6b, 0x31, 0x5d, 0x31, 0x0e, 0x00           ; IRQ 1: 0x315d, 0x000e
    db 0x83, 0x31, 0x79, 0x31, 0x0a, 0x00           ; IRQ 2: 0x3179, 0x000a
    db 0x93, 0x31, 0x8d, 0x31, 0x06, 0x00           ; IRQ 3: 0x318d, 0x0006
    db 0xa0, 0x31, 0x99, 0x31, 0x07, 0x00           ; IRQ 4: 0x3199, 0x0007
    db 0xb7, 0x31, 0xa7, 0x31, 0x10, 0x00           ; IRQ 5: 0x31a7, 0x0010
    db 0xd5, 0x31, 0xc7, 0x31, 0x0e, 0x00           ; IRQ 6: 0x31c7, 0x000e
    db 0xed, 0x31, 0xe3, 0x31, 0x0a, 0x00           ; IRQ 7: 0x31e3, 0x000a
    db 0xfd, 0x31, 0xf7, 0x31, 0x06, 0x00           ; IRQ 8: 0x31f7, 0x0006
    db 0x06, 0x32, 0x03, 0x32, 0x03, 0x00           ; IRQ 9: 0x3203, 0x0003
    db 0x19, 0x32, 0x09, 0x32, 0x10, 0x00           ; IRQ 10: 0x3209, 0x0010
    db 0x37, 0x32, 0x29, 0x32, 0x0e, 0x00           ; IRQ 11: 0x3229, 0x000e
    db 0x4f, 0x32, 0x45, 0x32, 0x0a, 0x00           ; IRQ 12: 0x3245, 0x000a
    db 0x5f, 0x32, 0x59, 0x32, 0x06, 0x00           ; IRQ 13: 0x3259, 0x0006
    db 0x00                                           ; Terminator/padding
