; lfsr_table.inc - Linear Feedback Shift Register lookup table
; 255-byte sequence for pseudo-random number generation
; Polynomial: 0xCF (bits 7,6,3,2,1,0)
; Initial seed: 0xFF
;
; Generated for 3Com Packet Driver - Groups 6A & 6B implementation
; Used for: Hardware randomization, collision backoff, load balancing

%ifndef LFSR_TABLE_INC
%define LFSR_TABLE_INC

; LFSR sequence generator constants
LFSR_POLYNOMIAL     equ 0xCF    ; x^8 + x^7 + x^6 + x^4 + x^3 + x^2 + x^1 + 1
LFSR_SEED          equ 0xFF    ; Initial value (must be non-zero)
LFSR_TABLE_SIZE    equ 255     ; Full cycle length (2^8 - 1)

; LFSR lookup table - 255 bytes of pseudo-random sequence
; Each byte is the next value in the LFSR sequence
align 2
lfsr_table:
    db 0xFF, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02
    db 0x01, 0x81, 0xC1, 0xE1, 0xF1, 0xF9, 0xFD, 0x7F
    db 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x82
    db 0x41, 0xA1, 0xD1, 0xE9, 0x75, 0x3B, 0x9E, 0x4F
    db 0xA8, 0x54, 0x2A, 0x15, 0x8B, 0xC6, 0x63, 0xB2
    db 0x59, 0xAD, 0xD7, 0xEC, 0x76, 0x3B, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F
    db 0x88, 0x44, 0x22, 0x11, 0x89, 0xC5, 0xE3, 0xF2
    db 0x79, 0xBD, 0xDF, 0xF0, 0x78, 0x3C, 0x1E

; Utility macros for LFSR operations
%macro LFSR_NEXT 1
    ; Get next LFSR value
    ; Input: %1 = current LFSR value (AL register)
    ; Output: AL = next LFSR value
    mov     bx, lfsr_table
    xor     ah, ah
    add     bx, ax
    mov     al, [bx]
%endmacro

%macro LFSR_RANDOM_BYTE 0
    ; Generate random byte using current LFSR state
    ; Output: AL = random byte
    push    bx
    call    get_lfsr_current
    LFSR_NEXT al
    call    set_lfsr_current
    pop     bx
%endmacro

; LFSR state management (requires implementation in main code)
extern get_lfsr_current    ; Returns current LFSR state in AL
extern set_lfsr_current    ; Sets LFSR state from AL

%endif ; LFSR_TABLE_INC